name: "Deploy to Cloudflare"
description: "Builds and deploys to Cloudflare"

inputs:
  cloudflare_account_id:
    required: true
    description: "Cloudflare account ID for deployment"
  cloudflare_api_token:
    required: true
    description: "Cloudflare API token for deployment"
  deploy_env:
    required: true
    description: "The environment to deploy to (e.g., production, staging)"

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        run_install: false

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: ".nvmrc"
        cache: "pnpm"

    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      shell: bash

    - name: Cache nextjs
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

    - name: Lint
      shell: bash
      run: pnpm run lint

    - name: Deploy to Cloudflare
      run: pnpm run cf-deploy
      shell: bash
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        DEPLOY_ENV: ${{ inputs.deploy_env }}
